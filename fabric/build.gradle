plugins {
    id "com.github.johnrengelman.shadow"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation "curse.maven:ui-933200:${project.ui_library_file_fabric}"
    modImplementation "curse.maven:yaml-config-1128669:${project.config_library_file_fabric}"
    modImplementation "curse.maven:arc-883593:${project.arc_file_fabric}"
}

processResources {
    var replaceProperties = [
            "version": project.version,
            "mod_id": project.mod_id,
            "mod_name": project.mod_name,
            "mod_description": project.mod_description,
            "mod_author": project.mod_author,
            "mod_license": project.mod_license,
            "mod_website": project.mod_website,
            "mod_repository": project.mod_repository,

            "minecraft_version": project.minecraft_version,
            "architectury_api_version": project.architectury_api_version,
            "ui_library_version": project.ui_library_version,
            "config_library_version": project.config_library_version,
            "arc_version": project.arc_version
    ]
    inputs.properties replaceProperties

    filesMatching(['fabric.mod.json']) {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "fabric-dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    archiveClassifier = "fabric"
}

remapSourcesJar {
    archiveClassifier = "fabric-sources"
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_API_KEY")
    project {
        id = project.curse_forge_project_id
        releaseType = project.release_type
        changelogType = "markdown"
        changelog = rootProject.file('changelog.md')

        project.supported_minecraft_versions.split(',').each { version ->
            addGameVersion version
        }

        addGameVersion "Java 21"
        addGameVersion "Fabric"

        relations {
            project.curseforge_dependencies.split(',').each { dep ->
                requiredDependency dep.trim()
            }
        }

        mainArtifact(remapJar) {
            displayName = "$project.mod_name Fabric $project.minecraft_version - $project.mod_version"
        }

        addArtifact(remapSourcesJar) {
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_API_KEY")
    projectId = project.modrinth_project_id
    versionName = "$project.mod_name Fabric $project.minecraft_version - $project.mod_version"
    versionNumber = "$project.mod_version"
    versionType = "$project.release_type"
    uploadFile = remapJar
    additionalFiles = [remapSourcesJar]
    gameVersions = project.supported_minecraft_versions.split(',').toList()
    loaders = ["fabric"]
    changelog = rootProject.file('changelog.md').text
    dependencies {
        project.modrinth_dependencies.split(',').each { dep ->
            required.project dep
        }
    }
}